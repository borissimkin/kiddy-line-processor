// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: sportsline.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SportsLinesServiceClient is the client API for SportsLinesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SportsLinesServiceClient interface {
	SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (SportsLinesService_SubscribeOnSportsLinesClient, error)
}

type sportsLinesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSportsLinesServiceClient(cc grpc.ClientConnInterface) SportsLinesServiceClient {
	return &sportsLinesServiceClient{cc}
}

func (c *sportsLinesServiceClient) SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (SportsLinesService_SubscribeOnSportsLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SportsLinesService_ServiceDesc.Streams[0], "/proto.SportsLinesService/SubscribeOnSportsLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &sportsLinesServiceSubscribeOnSportsLinesClient{stream}
	return x, nil
}

type SportsLinesService_SubscribeOnSportsLinesClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type sportsLinesServiceSubscribeOnSportsLinesClient struct {
	grpc.ClientStream
}

func (x *sportsLinesServiceSubscribeOnSportsLinesClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sportsLinesServiceSubscribeOnSportsLinesClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SportsLinesServiceServer is the server API for SportsLinesService service.
// All implementations must embed UnimplementedSportsLinesServiceServer
// for forward compatibility
type SportsLinesServiceServer interface {
	SubscribeOnSportsLines(SportsLinesService_SubscribeOnSportsLinesServer) error
	mustEmbedUnimplementedSportsLinesServiceServer()
}

// UnimplementedSportsLinesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSportsLinesServiceServer struct {
}

func (UnimplementedSportsLinesServiceServer) SubscribeOnSportsLines(SportsLinesService_SubscribeOnSportsLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnSportsLines not implemented")
}
func (UnimplementedSportsLinesServiceServer) mustEmbedUnimplementedSportsLinesServiceServer() {}

// UnsafeSportsLinesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SportsLinesServiceServer will
// result in compilation errors.
type UnsafeSportsLinesServiceServer interface {
	mustEmbedUnimplementedSportsLinesServiceServer()
}

func RegisterSportsLinesServiceServer(s grpc.ServiceRegistrar, srv SportsLinesServiceServer) {
	s.RegisterService(&SportsLinesService_ServiceDesc, srv)
}

func _SportsLinesService_SubscribeOnSportsLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SportsLinesServiceServer).SubscribeOnSportsLines(&sportsLinesServiceSubscribeOnSportsLinesServer{stream})
}

type SportsLinesService_SubscribeOnSportsLinesServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type sportsLinesServiceSubscribeOnSportsLinesServer struct {
	grpc.ServerStream
}

func (x *sportsLinesServiceSubscribeOnSportsLinesServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sportsLinesServiceSubscribeOnSportsLinesServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SportsLinesService_ServiceDesc is the grpc.ServiceDesc for SportsLinesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SportsLinesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SportsLinesService",
	HandlerType: (*SportsLinesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnSportsLines",
			Handler:       _SportsLinesService_SubscribeOnSportsLines_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sportsline.proto",
}
