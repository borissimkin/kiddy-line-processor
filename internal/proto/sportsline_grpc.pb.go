// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sportsline.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SportsLinesService_SubscribeOnSportsLines_FullMethodName = "/proto.SportsLinesService/SubscribeOnSportsLines"
)

// SportsLinesServiceClient is the client API for SportsLinesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SportsLinesServiceClient interface {
	SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeRequest, SubscribeResponse], error)
}

type sportsLinesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSportsLinesServiceClient(cc grpc.ClientConnInterface) SportsLinesServiceClient {
	return &sportsLinesServiceClient{cc}
}

func (c *sportsLinesServiceClient) SubscribeOnSportsLines(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeRequest, SubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SportsLinesService_ServiceDesc.Streams[0], SportsLinesService_SubscribeOnSportsLines_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, SubscribeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SportsLinesService_SubscribeOnSportsLinesClient = grpc.BidiStreamingClient[SubscribeRequest, SubscribeResponse]

// SportsLinesServiceServer is the server API for SportsLinesService service.
// All implementations must embed UnimplementedSportsLinesServiceServer
// for forward compatibility.
type SportsLinesServiceServer interface {
	SubscribeOnSportsLines(grpc.BidiStreamingServer[SubscribeRequest, SubscribeResponse]) error
	mustEmbedUnimplementedSportsLinesServiceServer()
}

// UnimplementedSportsLinesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSportsLinesServiceServer struct{}

func (UnimplementedSportsLinesServiceServer) SubscribeOnSportsLines(grpc.BidiStreamingServer[SubscribeRequest, SubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnSportsLines not implemented")
}
func (UnimplementedSportsLinesServiceServer) mustEmbedUnimplementedSportsLinesServiceServer() {}
func (UnimplementedSportsLinesServiceServer) testEmbeddedByValue()                            {}

// UnsafeSportsLinesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SportsLinesServiceServer will
// result in compilation errors.
type UnsafeSportsLinesServiceServer interface {
	mustEmbedUnimplementedSportsLinesServiceServer()
}

func RegisterSportsLinesServiceServer(s grpc.ServiceRegistrar, srv SportsLinesServiceServer) {
	// If the following call pancis, it indicates UnimplementedSportsLinesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SportsLinesService_ServiceDesc, srv)
}

func _SportsLinesService_SubscribeOnSportsLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SportsLinesServiceServer).SubscribeOnSportsLines(&grpc.GenericServerStream[SubscribeRequest, SubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SportsLinesService_SubscribeOnSportsLinesServer = grpc.BidiStreamingServer[SubscribeRequest, SubscribeResponse]

// SportsLinesService_ServiceDesc is the grpc.ServiceDesc for SportsLinesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SportsLinesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SportsLinesService",
	HandlerType: (*SportsLinesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnSportsLines",
			Handler:       _SportsLinesService_SubscribeOnSportsLines_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sportsline.proto",
}
