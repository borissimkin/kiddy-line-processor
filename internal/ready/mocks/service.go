// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ready/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/ready/service.go -destination=internal/ready/mocks/service.go -package=readymocks
//

// Package readymocks is a generated GoMock package.
package readymocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorageReadyChecker is a mock of StorageReadyChecker interface.
type MockStorageReadyChecker struct {
	ctrl     *gomock.Controller
	recorder *MockStorageReadyCheckerMockRecorder
	isgomock struct{}
}

// MockStorageReadyCheckerMockRecorder is the mock recorder for MockStorageReadyChecker.
type MockStorageReadyCheckerMockRecorder struct {
	mock *MockStorageReadyChecker
}

// NewMockStorageReadyChecker creates a new mock instance.
func NewMockStorageReadyChecker(ctrl *gomock.Controller) *MockStorageReadyChecker {
	mock := &MockStorageReadyChecker{ctrl: ctrl}
	mock.recorder = &MockStorageReadyCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageReadyChecker) EXPECT() *MockStorageReadyCheckerMockRecorder {
	return m.recorder
}

// Ready mocks base method.
func (m *MockStorageReadyChecker) Ready(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockStorageReadyCheckerMockRecorder) Ready(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockStorageReadyChecker)(nil).Ready), ctx)
}

// MockLineSyncedChecker is a mock of LineSyncedChecker interface.
type MockLineSyncedChecker struct {
	ctrl     *gomock.Controller
	recorder *MockLineSyncedCheckerMockRecorder
	isgomock struct{}
}

// MockLineSyncedCheckerMockRecorder is the mock recorder for MockLineSyncedChecker.
type MockLineSyncedCheckerMockRecorder struct {
	mock *MockLineSyncedChecker
}

// NewMockLineSyncedChecker creates a new mock instance.
func NewMockLineSyncedChecker(ctrl *gomock.Controller) *MockLineSyncedChecker {
	mock := &MockLineSyncedChecker{ctrl: ctrl}
	mock.recorder = &MockLineSyncedCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineSyncedChecker) EXPECT() *MockLineSyncedCheckerMockRecorder {
	return m.recorder
}

// Synced mocks base method.
func (m *MockLineSyncedChecker) Synced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Synced indicates an expected call of Synced.
func (mr *MockLineSyncedCheckerMockRecorder) Synced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synced", reflect.TypeOf((*MockLineSyncedChecker)(nil).Synced))
}
